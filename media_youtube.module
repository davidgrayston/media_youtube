<?php
// $Id$

/**
 *  @file
 *  Media YouTube provides a stream wrapper and formatters for videos provided
 *  by YouTube, available at http://youtube.com/.
 *
 *  @TODO:
 *  Hook into Media, allowing editors to enter a URL in a text box.
 *  Parse YouTube URL's.
 *  Create a video size transformer hook for media styles.
 *  Create a thumbnail importer for media styles/ image styles.
 *  Tie in YouTube API.
 *  Allow editors to search for videos to display on the browser.
 *  Allow editors to put in a youtube username to display on the browser.
 *  Allow editors to log in w/ their credentials.
 */

/**
 * Implementation of hook_media_register
 * @TODO please see notes in the hook for revising this
 *
 * @return array
 *   Form array items
*/
function media_youtube_media_register() {
  $items = array();

  // Register User files display
  $items['media_youtube_user_files'] = array(
    'tab' => 'YouTube',
    'subtab' => 'YouTube Videos I have attached',
    // Do we need a name for this?
    'name' => 'YouTube user files',
    // Is a type necessary, or can we just exploit this
    // in the callbacks section?
    'kind' => 'resource',
    // Shouldn't this be a mimetype?
    'types'       => '*',
    'description'  => 'Displays all of current user\'s YouTube streams.',
    'callbacks'   => array(
      'resource'    => 'media_youtube_user_files_select',
    ),
    // Won't this be define d in the widget
    // rather than here?
    'fields'      => array('file'),
  );

  // Register all uploaded files
  $items['media_youtube_all_uploaded_files'] = array(
    'tab' => 'YouTube',
    'subtab' => 'All YouTube videos',
    // Do we need a name for this?
    'name' => 'YouTube videos',
    // Is a type necessary, or can we just exploit this
    // in the callbacks section?
    'kind' => 'resource',
    // Shouldn't this be a mimetype?
    'types'       => '*',
    'description'  => 'Displays all current YouTube files.',
    'callbacks'   => array(
      'resource'    => 'media_youtube_uploaded_files_select',
    ),
    // Won't this be define d in the widget
    // rather than here?
    'fields'      => array('file'),
  );

    // Register all uploaded files
  $items['media_youtube_new_file'] = array(
    'tab' => 'YouTube',
    'subtab' => 'Paste new YouTube URL or embed code',
    // Do we need a name for this?
    'name' => 'YouTube URL',
    // Is a type necessary, or can we just exploit this
    // in the callbacks section?
    'kind' => 'resource',
    // Shouldn't this be a mimetype?
    'types'       => '*',
    'description'  => 'Paste new YouTube file.',
    'callbacks'   => array(
      'resource'    => 'media_youtube_files_embed',
    ),
    // Won't this be define d in the widget
    // rather than here?
    'fields'      => array('file'),
  );

  // Register User files display
//   $items['media_file_directory_files'] = array(
//     'tab' => 'Filesystem',
//     'subtab' => 'Files in a directory',
//     'name' => 'Files in a directory',
//     'kind'        => 'resource',
//     'types'       => '*',
//     'description'  => 'All files in a directory',
//     'callbacks'   => array(
//       'resource'    => 'media_file_filesystem_select',
//     ),
//     'fields'      => array('file'),
//   );


  // Register Add/File file functionality
//   $items['media_youtube_resource_add_file'] = array(
//     'tab' => 'Upload a file',
//     'subtab' => 'Upload a file',
//     'name'        => 'Media File add file',
//     'description' => t("Add new file using Drupal's File module"),
//     'kind'        => 'resource',
//     'callbacks'   => array(
//       'resource'    => 'media_file_resource_add_file',
//     ),
//     'fields'      => array('file'),
//   );

  // Register Embed file functionality
  $items['media_youtube_resource_embed_file'] = array(
    'name'        => 'Media YouTube embed file',
    'description' => t("Embed YouTube URI using Drupal's File module"),
    'uri'         => 'file',
    'kind'        => 'resource',
    'types'       => '*',
    'callbacks'   => array(
      'resource'    => 'media_youtube_resource_embed_file',
     ),
    'fields'      => array('file'),
  );

  // Register form formatter functionality
  $items['media_youtube_formatter_form'] = array(
    'name'        => 'Media YouTube form formatter',
    'description' => "Media YouTube form formatter",
    'kind'        => 'formatter',
    'callbacks'   => array(
      'formatter'        => 'media_youtube_formatter_form',
    ),
    'fields'      => array('file'),
    );

  // Register action functionality
  // @TODO: This may not be needed depending on our implementation of hook_media_action [see #480166]
  $items['media_file_action'] = array(
    'name'        => 'Media File action handler',
    'description' => t("Called to perform various actions such as attaching a file to a node"),
    'kind'        => 'action',
    'types'       => '*',
    'callbacks'   => array(
      'action'      => 'media_file_action',
     ),
    'fields'      => array('file'),
  );

  return $items;
}

function media_youtube_files_embed($parameters) {
  $form = drupal_get_form('media_youtube_files_embed_form');
  return drupal_render($form);
}

function media_youtube_files_embed_form() {
  $form = array();
  $form['youtube'] = array(
    '#type' => 'textfield',
    '#title' => t('YouTube URL or Embed Code'),
    '#description' => t('Please copy and paste the desired YouTube URL or embed code here and press submit.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 *  Create stream wrapper for YouTube videos.
 */
function media_youtube_stream_wrappers() {
  stream_wrapper_register('youtube', 'MediaYouTubeStreamWrapper');
  return array(
    'youtube' => array(
      'name' => t('YouTube videos'),
      'class' => 'MediaYouTubeStreamWrapper',
      'description' => t('Videos provided by YouTube.'),
    ),
  );
}

function media_youtube_theme($existing, $type, $theme, $path) {
  return array(
    'media_youtube_preview_style_old' => array(
      'variables' => array('style' => NULL),
    ),
    'media_youtube_preview_style' => array(
      'variables' => array('field_type' => NULL, 'container_name' => NULL, 'style_name' => NULL),
    ),
    'media_youtube_style' => array(
      'variables' => array('element' => NULL, 'style' => NULL),
    ),
    'media_youtube_embed' => array(
      'variables' => array('style_name' => NULL, 'url' => NULL),
    ),
  );
}

function theme_media_youtube_style($variables) {
  $element = $variables['element'];
  $style = $variables['style'];
  $variables['file'] = $element['#item'];
  $variables['uri'] = $variables['file']['uri'];
  $variables['style_name'] = $style['name'];
  return theme('media_youtube_embed', $variables);
}

function media_youtube_styles_containers() {
  return array(
    'file' => array(
      'media_youtube' => array(
        'label' => t('YouTube Styles'),
        'data' => array(
          'streams' => array(
            'youtube',
          ),
          'mimetypes' => array(
            'application/octet-stream',
          ),
        ),
        'preview theme' => 'media_youtube_preview_style',
        'filter callback' => 'media_youtube_formatter_filter',
        'theme' => 'media_youtube_style',
        'help' => t('YouTube Styles will display embedded YouTube videos and thumbnails to your choosing, such as by resizing, setting colors, and autoplay. You can !manage.', array('!manage' => l(t('manage your YouTube styles here'), 'admin/config/media/media-youtube-styles'))),
      ),
    ),
  );
}

function media_youtube_formatter_filter($element) {
  $item = $element['#item'];
  return (file_uri_scheme($item['uri']) == 'youtube') && ($item['filemime'] == 'application/octet-stream');
}

function media_youtube_styles_styles() {
  return array(
    'file' => array(
      'media_youtube' => array(
        'youtube_preview' => array(
          'name' => 'youtube_preview',
          'effects' => array(
            array('label' => t('Autoplay'), 'name' => 'autoplay', 'data' => array('autoplay' => 1)),
            array('label' => t('Resize'), 'name' => 'resize', 'data' => array('width' => 320, 'height' => 240)),
          ),
        ),
        'youtube_full' => array(
          'name' => 'youtube_full',
          'effects' => array(
            array('label' => t('Autoplay'), 'name' => 'autoplay', 'data' => array('autoplay' => 0)),
            array('label' => t('Resize'), 'name' => 'resize', 'data' => array('width' => 640, 'height' => 480)),
          ),
        ),
      ),
    ),
  );
}

function media_youtube_styles_presets() {
  $presets = array(
    'file' => array(
      'medium' => array(
        'media_youtube' => array(
          'youtube_preview',
        ),
      ),
      'large' => array(
        'media_youtube' => array(
          'youtube_full',
        ),
      ),
    ),
  );
  return $presets;
}

function theme_media_youtube_preview_style($variables) {
  $variables['uri'] = variable_get('media_youtube_preview_uri', 'youtube://v/-jubiv7QUco');
  return theme('media_youtube_embed', $variables);
}

function theme_media_youtube_embed($variables) {
  $style_name = $variables['style_name'];
  $style = styles_containers_available_styles('file', 'media_youtube', $style_name);
  if (!empty($style)) {
    // Build the URL for display.
    $uri = $variables['uri'];
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $parts = $wrapper->get_parameters();
    $url = 'http://youtube.com/v/'. check_plain($parts['v']);

    $sample_video = variable_get('media_youtube_preview_sample_video_uri', 'youtube://v/-jubiv7QUco');
    $fullscreen_value = 'false';
    $autoplay = 'false';
    foreach ($style['effects'] as $effect) {
      switch ($effect['name']) {
        case 'autoplay':
          $autoplay = $effect['data']['autoplay'] ? 'true' : 'false';
          break;
        case 'resize':
          $width = $effect['data']['width'];
          $height = $effect['data']['height'];
          break;
        case 'fullscreen':
          $fullscreen_value = 'true';
          break;
      }
    }
    $id = 'media-youtube-preview';
    $div_id = 'media-youtube-preview-wrapper';
    $flashvars = check_plain(drupal_http_build_query(array('playerMode' => 'embedded')));
    // <object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/lZ-s3DRZJKY&hl=en&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/lZ-s3DRZJKY&hl=en&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></embed></object>
    $output = <<<OUTPUT
          <div id="$div_id"><object type="application/x-shockwave-flash" height="$height" width="$width" data="$url" id="$id">
            <param name="movie" value="$url" />
            <param name="allowScriptAcess" value="sameDomain"/>
            <param name="quality" value="best"/>
            <param name="allowFullScreen" value="$fullscreen_value"/>
            <param name="bgcolor" value="#FFFFFF"/>
            <param name="scale" value="noScale"/>
            <param name="salign" value="TL"/>
            <param name="FlashVars" value="$flashvars" />
            <param name="wmode" value="transparent" />
          </object></div>
OUTPUT;
    return $output;
  }
}

/** @TODO: Remove below, it's CRUFT **/

/**
 * Implement hook_media_effect_info().
 */
function media_youtube_media_effect_info() {
  return array(
    'media_youtube_media_effect_info' => array(
      'label' => t('YouTube styles'),
      'streams' => array('youtube://'),
      'mimetypes' => array('application/octet-stream'),
      'preview-theme' => 'media_youtube_preview_style',
      'styles' => array(
        'thumbnail' => array(
          'name' => 'thumbnail',
          'module' => 'media_youtube',
          'effects' => array(
            array('label' => t('Autoplay'), 'name' => 'autoplay', 'data' => array('autoplay' => 1)),
            array('label' => t('Resize'), 'name' => 'resize', 'data' => array('width' => 320, 'height' => 240)),
          ),
        ),
        'youtube_full' => array(
          'name' => 'youtube_full',
          'module' => 'media_youtube',
          'effects' => array(
            array('label' => t('Autoplay'), 'name' => 'autoplay', 'data' => array('autoplay' => 0)),
            array('label' => t('Resize'), 'name' => 'resize', 'data' => array('width' => 640, 'height' => 480)),
          ),
        ),
      ),
    ),
  );
}

function theme_media_youtube_preview_style_old($variables) {
  $style = $variables['style'];
  $sample_video = variable_get('media_youtube_preview_sample_video_uri', 'youtube://v/-jubiv7QUco');
  $fullscreen_value = 'false';
  $autoplay = 'false';
  foreach ($style['effects'] as $effect) {
    switch ($effect['name']) {
      case 'autoplay':
        $autoplay = $effect['data']['autoplay'] ? 'true' : 'false';
        break;
      case 'resize':
        $width = $effect['data']['width'];
        $height = $effect['data']['height'];
        break;
      case 'fullscreen':
        $fullscreen_value = 'true';
        break;
    }
  }
  $url = 'http://www.youtube.com/v/-jubiv7QUco';
  $id = 'media-youtube-preview';
  $div_id = 'media-youtube-preview-wrapper';
  $flashvars = check_plain(drupal_http_build_query(array('playerMode' => 'embedded')));
  // <object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/lZ-s3DRZJKY&hl=en&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/lZ-s3DRZJKY&hl=en&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></embed></object>
  $output = <<<OUTPUT
        <div id="$div_id"><object type="application/x-shockwave-flash" height="$height" width="$width" data="$url" id="$id">
          <param name="movie" value="$url" />
          <param name="allowScriptAcess" value="sameDomain"/>
          <param name="quality" value="best"/>
          <param name="allowFullScreen" value="$fullscreen_value"/>
          <param name="bgcolor" value="#FFFFFF"/>
          <param name="scale" value="noScale"/>
          <param name="salign" value="TL"/>
          <param name="FlashVars" value="$flashvars" />
          <param name="wmode" value="transparent" />
        </object></div>
OUTPUT;
  return $output;
}
