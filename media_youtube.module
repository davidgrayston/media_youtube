<?php
// $Id$

/**
 *  @file
 *  Media YouTube provides a stream wrapper and formatters for videos provided
 *  by YouTube, available at http://youtube.com/.
 *
 *  @TODO:
 *  Create a thumbnail importer for media styles/ image styles.
 *  Tie in YouTube API.
 *  Allow editors to search for videos to display on the browser.
 *  Allow editors to put in a youtube username to display on the browser.
 *  Allow editors to log in w/ their credentials.
 */

/**
 * Implement hook_menu().
 */
function media_youtube_menu() {
  // AJAX parser. This function is called to parse a URL from the browser,
  // returning a valid youtube://uri.
//   $items['media-youtube/parse'] = array(
//     'page callback'    => 'media_youtube_ajax_parse',
//     'access arguments' => array('access content'),
//   );
  $items['media/add/media_youtube'] = array(
    'title' => 'Add media from YouTube',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_youtube_add'),
    'access arguments' => array('administer media'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'media_youtube.admin.inc',
    'weight' => -1,
  );

  $items['admin/content/media/add/media_youtube'] = $items['media/add/media_youtube'];
  return $items;
}

/**
 *  Parse a YouTube URL from the query and return the result for an AJAX call.
 */
// function media_youtube_ajax_parse() {
//   $string = $_GET['parse'];
//   $parse = array();
//   if (preg_match('@youtube\.com/watch\?v=([^"\& ]+)@i', $string, $matches)) {
//     $parse['uri'] = 'youtube://v/'. $matches[1];
//     $parse['status'] = 'ok';
//     $parse['preview'] = theme('media_youtube_embed', array('style_name' => 'youtube_preview', 'uri' => $parse['uri']));
//   }
//   else {
//     $parse['status'] = 'fail';
//   }
//   drupal_json_output($parse);
// }
//
// function media_youtube_files_embed($parameters) {
//   $form = drupal_get_form('media_youtube_files_embed_form');
//   return drupal_render($form);
// }
//
// function media_youtube_files_embed_form() {
//   // Load the custom JS
//   $form = array();
//   $form['#attached']['js'] = array(
//     drupal_get_path('module', 'media_youtube') . '/js/media_youtube.js'
//   );
//   $form['media-youtube-url'] = array(
//     '#type' => 'textfield',
//     '#title' => t('YouTube URL or Embed Code'),
//     '#description' => t('Please copy and paste the desired YouTube URL or embed code here and press submit.'),
//   );
//   $form['media-youtube-preview'] = array(
//     '#markup' => '<div class="media-youtube-preview-markup"></div>',
//   );
//   return $form;
// }
//
// function media_youtube_files_embed_form_submit(&$form, $form_state) {
// //   dpm('my submit');
// }

/**
 * Fetches all files associated with the current user
 * Provides standard file navigation system.
 *
 * @param $options
 *   array options which define current navigation states
 * @param $invoke
 *   boolean is the first invocation- add specific data that
 *   is required for additional ajax callbacks
 */
// function media_youtube_user_files_select($parameters) {
//   global $user;
//   // Use a default value for limit
//   if (!isset($parameters['limit']) ) {
//     $parameters['limit'] = 10;
//   }
//
//   if (isset($parameters['object-type']) && isset($parameters['field-name']) && isset($parameters['bundle'])) {
//     $instance = field_info_instance($parameters['object-type'], $parameters['field-name'], $parameters['bundle']);
//     $field = field_info_field($parameters['field-name']);
//   }
//
//   if (empty($instance) || empty($field)) {
//     // Invalid parameters.
//     // @TODO another arthur hack to make things "work"
//     // return;
//   }
//   $allowed_schemes = $instance['widget']['settings']['allowed_schemes'];
//   $directory = $instance['settings']['file_directory'];
//   $extensions = $instance['settings']['file_extensions'];
//   $scheme = $field['settings']['uri_scheme'];
//
//   // Get all files in the system
//   $query =  db_select('file', 'f')->extend('PagerDefault');
//   $query->fields('f', array('fid'));
//   $query->condition('f.uid', $user->uid, '=');
//
//   // Grab only files that are in the YouTube stream.
//   $query->condition('f.uri', 'youtube://%%', 'LIKE');
//   /*
//       @TODO sorry peter, this was bombing things for me
//             I need to figure out why my data coming back to
//             you is not valid....
//
//       $or = db_or();
//       foreach ($allowed_schemes as $scheme) {
//         $or->condition('f.uri', $scheme . '://%', 'LIKE');
//       }
//       $query->condition($or);*/
//   // TODO: filter by mimetype.
//   $fids = $query->limit($parameters['limit'])->execute()->fetchCol();
//   // Now load all the files as objects
//   $files = file_load_multiple($fids);
//   return theme('media_browser_content_frame', array('files' => $files, 'parameters' => $parameters, 'invoke' => $invoke));
// }


/**
 * Fetches all uploaded files
 * Provides standard file navigation system.
 *
 * @param $options
 *   array options which define current navigation states
 * @param $invoke
 *   boolean is the first invocation- add specific data that
 *   is required for additional ajax callbacks
 */
// function media_youtube_uploaded_files_select($parameters) {
//   // Use a default value for limit
//   if (!isset($parameters['limit']) ) {
//     $parameters['limit'] = 10;
//   }
//
//   if (isset($parameters['object-type']) && isset($parameters['field-name']) && isset($parameters['bundle'])) {
//     $instance = field_info_instance($parameters['object-type'], $parameters['field-name'], $parameters['bundle']);
//     $field = field_info_field($parameters['field-name']);
//   }
//
//   if (empty($instance) || empty($field)) {
//     // Invalid parameters.
//     // @TODO another arthur hack to make things "work"
//     // return;
//   }
//   $allowed_schemes = $instance['widget']['settings']['allowed_schemes'];
//   $directory = $instance['settings']['file_directory'];
//   $extensions = $instance['settings']['file_extensions'];
//   $scheme = $field['settings']['uri_scheme'];
//
//   // Get all files in the system
//   // TODO: allow this to use a View.
//   $query =  db_select('file', 'f')->extend('PagerDefault');
//   $query->fields('f', array('fid'));
//
//   // Grab only files that are in the YouTube stream.
//   $query->condition('f.uri', 'youtube://%%', 'LIKE');
//
//   /*
//       @TODO sorry peter, this was bombing things for me
//             I need to figure out why my data coming back to
//             you is not valid....
//
//       $or = db_or();
//       foreach ($allowed_schemes as $scheme) {
//         $or->condition('f.uri', $scheme . '://%', 'LIKE');
//       }
//       $query->condition($or);*/
//   // TODO: filter by mimetype.
//   $fids = $query->limit($parameters['limit'])->execute()->fetchCol();
//   // Now load all the files as objects
//   $files = file_load_multiple($fids);
//   return theme('media_browser_content_frame', array('files' => $files, 'parameters' => $parameters, 'invoke' => $invoke));
// }

/**
 *  Create stream wrapper for YouTube videos.
 */
function media_youtube_stream_wrappers() {
  stream_wrapper_register('youtube', 'MediaYouTubeStreamWrapper');
  return array(
    'youtube' => array(
      'name' => t('YouTube videos'),
      'class' => 'MediaYouTubeStreamWrapper',
      'description' => t('Videos provided by YouTube.'),
    ),
  );
}

/**
 *  Implements hook_theme().
 */
function media_youtube_theme($existing, $type, $theme, $path) {
  return array(
    'media_youtube_preview_style_old' => array(
      'variables' => array('style' => NULL),
    ),
    'media_youtube_preview_style' => array(
      'variables' => array('field_type' => NULL, 'container_name' => NULL, 'style_name' => NULL),
    ),
    'media_youtube_field_formatter_styles' => array(
      'variables' => array('element' => NULL, 'style' => NULL),
    ),
    'media_youtube_embed' => array(
      'variables' => array('style_name' => NULL, 'uri' => NULL, 'alt' => NULL, 'title' => NULL),
    ),
    'media_youtube_styles' => array(
      'variables' => array('element' => NULL, 'style' => NULL),
    ),
  );
}

function theme_media_youtube_field_formatter_styles($variables) {
  $element = $variables['element'];
  $style = $variables['style'];
  $variables['file'] = $element['#item'];
  $variables['uri'] = $variables['file']['uri'];
  $variables['style_name'] = $style['name'];
  return theme('media_youtube_embed', $variables);
}

/**
 *  Implements hook_styles_containers().
 */
function media_youtube_styles_containers() {
  return array(
    'file' => array(
      'containers' => array(
        'media_youtube' => array(
          'label' => t('YouTube Styles'),
          'data' => array(
            'streams' => array(
              'youtube',
            ),
            'mimetypes' => array(
              'application/octet-stream',
            ),
          ),
          'weight' => 0,
          'filter callback' => 'media_youtube_formatter_filter',
          'themes' => array(
            'field_formatter_styles' => 'media_youtube_field_formatter_styles',
            'styles' => 'media_youtube_styles',
            'preview' => 'media_youtube_preview_style',
          ),
          'description' => t('YouTube Styles will display embedded YouTube videos and thumbnails to your choosing, such as by resizing, setting colors, and autoplay. You can !manage.', array('!manage' => l(t('manage your YouTube styles here'), 'admin/config/media/media-youtube-styles'))),
        ),
      ),
    ),
  );
}

function media_youtube_formatter_filter($variables) {
  if (isset($variables['object'])) {
    $object = $variables['object'];
    return (file_uri_scheme($object->uri) == 'youtube') && ($object->filemime == 'application/octet-stream');
  }
}

/**
 *  Implements hook_styles_styles().
 */
function media_youtube_styles_styles() {
  return array(
    'file' => array(
      'containers' => array(
        'media_youtube' => array(
          'styles' => array(
            'youtube_thumbnail' => array(
              'name' => 'youtube_thumbnail',
              'effects' => array(
                array('label' => t('Thumbnail'), 'name' => 'thumbnail', 'data' => array('thumbnail' => 1)),
                array('label' => t('Resize'), 'name' => 'resize', 'data' => array('width' => 100, 'height' => 75)),
              ),
            ),
            'youtube_preview' => array(
              'name' => 'youtube_preview',
              'effects' => array(
                array('label' => t('Autoplay'), 'name' => 'autoplay', 'data' => array('autoplay' => 1)),
                array('label' => t('Resize'), 'name' => 'resize', 'data' => array('width' => 220, 'height' => 165)),
              ),
            ),
            'youtube_full' => array(
              'name' => 'youtube_full',
              'effects' => array(
                array('label' => t('Autoplay'), 'name' => 'autoplay', 'data' => array('autoplay' => 0)),
                array('label' => t('Resize'), 'name' => 'resize', 'data' => array('width' => 640, 'height' => 480)),
                array('label' => t('Full screen'), 'name' => 'fullscreen', 'data' => array('fullscreen' => 1)),
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 *  Implements hook_styles_presets().
 */
function media_youtube_styles_presets() {
  $presets = array(
    'file' => array(
      'square_thumbnail' => array(
        'media_youtube' => array(
          'youtube_thumbnail',
        ),
      ),
      'thumbnail' => array(
        'media_youtube' => array(
          'youtube_thumbnail',
        ),
      ),
      'small' => array(
        'media_youtube' => array(
          'youtube_preview',
        ),
      ),
      'large' => array(
        'media_youtube' => array(
          'youtube_full',
        ),
      ),
      'original' => array(
        'media_youtube' => array(
          'youtube_full',
        ),
      ),
    ),
  );
  return $presets;
}

function theme_media_youtube_preview_style($variables) {
  $variables['uri'] = variable_get('media_youtube_preview_uri', 'youtube://v/-jubiv7QUco');
  return theme('media_youtube_embed', $variables);
}

function theme_media_youtube_styles($variables) {
  $style = $variables['style'];
  $variables['file'] = $variables['object'];
  $variables['uri'] = $variables['object']->uri;
  $variables['style_name'] = $style['name'];
  return theme('media_youtube_embed', $variables);
}

function theme_media_youtube_embed($variables) {
  $preset_name = $variables['preset_name'];
  $preset = styles_containers_available_styles('file', 'media_youtube', $preset_name);
  $output = '';
  if (!empty($preset)) {
    // Build the URL for display.
    $uri = $variables['uri'];
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $parts = $wrapper->get_parameters();
    $url = 'http://youtube.com/v/'. check_plain($parts['v']);

    $fullscreen_value = $autoplay = 'false';
    $thumbnail = FALSE;

    foreach ($preset['effects'] as $effect) {
      switch ($effect['name']) {
        case 'autoplay':
          $autoplay = $effect['data']['autoplay'] ? 'true' : 'false';
          break;
        case 'resize':
          $width = $effect['data']['width'];
          $height = $effect['data']['height'];
          break;
        case 'fullscreen':
          $fullscreen_value = $effect['data']['fullscreen'] ? 'true' : 'false';
          break;
        case 'thumbnail':
          $thumbnail = $effect['data']['thumbnail'];
      }
    }
    if (isset($variables['object']->override)) {
      $override = $variables['object']->override;
      if (isset($override['width'])) {
        $width = $override['width'];
      }
      if (isset($override['height'])) {
        $height = $override['height'];
      }
      if (isset($override['wysiwyg'])) {
        $thumbnail = TRUE;
      }
    }
    $width = isset($width) ? $width : 560;
    $height = isset($height) ? $height : 340;
    if ($thumbnail) {
      return theme('image', array(
        'path' => 'http://img.youtube.com/vi/'. check_plain($parts['v']) .'/0.jpg',
        'alt' => $variables['alt'],
        'title' => $variables['title'],
        'attributes' => array('width' => $width, 'height' => $height),
        'getsize' => FALSE,
      ));
    }
    $id = 'media-youtube-preview';
    $div_id = 'media-youtube-preview-wrapper';
    $flashvars = check_plain(drupal_http_build_query(array('playerMode' => 'embedded')));
    // <object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/lZ-s3DRZJKY&hl=en&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/lZ-s3DRZJKY&hl=en&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></embed></object>
    $output = <<<OUTPUT
          <div id="$div_id"><object type="application/x-shockwave-flash" height="$height" width="$width" data="$url" id="$id">
            <param name="movie" value="$url" />
            <param name="allowScriptAcess" value="sameDomain"/>
            <param name="quality" value="best"/>
            <param name="allowFullScreen" value="$fullscreen_value"/>
            <param name="bgcolor" value="#FFFFFF"/>
            <param name="scale" value="noScale"/>
            <param name="salign" value="TL"/>
            <param name="FlashVars" value="$flashvars" />
            <param name="wmode" value="transparent" />
          </object></div>
OUTPUT;
  }
  return $output;
}

/**
 * Implement hook_media_browser_plugins
 * @return unknown_type
 */
function media_youtube_media_browser_plugins() {
  $plugins = array();
  $path = drupal_get_path('module', 'media_youtube');

  module_load_include('inc', 'media_youtube', 'media_youtube.admin');

  $redirect = array('media/browser', array('query' => array('render' => 'media-popup')));

  $upload_form = drupal_get_form('media_youtube_add', $redirect);

  $plugins['media_youtube'] = array(
    '#attached' => array(
      'js' => array($path . '/js/media_youtube.fromurl.js'),
    ),
    'settings' => array(
      'media_youtube' => drupal_render($upload_form),
    ),
  );

  return $plugins;
}

/**
 *  Implements hook_media_parse().
 */
function media_youtube_media_parse($url, $options = array()) {
  $scheme = 'youtube://';
  preg_match('@youtube\.com/watch[#\?]v=([^"\& ]+)@i', $url, $matches);
  if (isset($matches[1])) {
    return file_stream_wrapper_uri_normalize($scheme . 'v/' . $matches[1]);
  }
  // @TODO: Validate for malformed youtube urls.
}
